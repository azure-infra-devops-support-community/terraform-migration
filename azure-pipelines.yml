variables:
  - group: bootcamp-variables  

trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

stages: 
  - stage: Terraform_build
    jobs:
      - job: Build
        steps:
          - task: AzureCLI@2
            displayName: 'Azure CLI Login'
            inputs:
              azureSubscription: $(SVC_CONNECTION)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az account show  

          - task: TerraformInstaller@2
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.9.8'

          - task: TerraformCLI@2
            displayName: 'Terraform Initialization'
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              backendType: 'azurerm'
              backendServiceArm: $(SVC_CONNECTION)
              backendAzureRmResourceGroupName: '$(TFSTATE_RG)'
              backendAzureRmStorageAccountName: '$(TFSTATE_SA)'
              backendAzureRmContainerName: '$(TFSTATE_CONTAINER)'
              backendAzureRmKey: '$(TFSTATE_KEY)'
              allowTelemetryCollection: true
              commandOptions: '-upgrade'

          - task: TerraformCLI@2
            displayName: 'Terraform Plan'
            inputs:
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              environmentServiceName: $(SVC_CONNECTION)
              allowTelemetryCollection: true
              publishPlanResults: 'output'
              commandOptions: >
                -lock=false -input=false -out=output.tfplan
                -var "subscription_id=$(ARM_SUBSCRIPTION_ID)"
                -var "client_id=$(ARM_CLIENT_ID)"
                -var "client_secret=$(ARM_CLIENT_SECRET)"
                -var "tenant_id=$(ARM_TENANT_ID)"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Plan as Artifact'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/output.tfplan'
              artifact: 'tfplan'

  - stage: Terraform_Deploy
    dependsOn: Terraform_build
    jobs:
    - deployment: Deploy_Infrastructure
      displayName: 'Deploy Infrastructure to Environment'
      environment: 'dev'
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: tfplan

            - script: |
                echo "Listing files after downloading artifact:"
                ls -l $(Pipeline.Workspace)/tfplan/
                cp $(Pipeline.Workspace)/tfplan/output.tfplan $(System.DefaultWorkingDirectory)/dev/
              displayName: 'Validate and Move Tplan for Apply'

            - task: TerraformCLI@2
              displayName: 'Re-initialize'
              inputs:
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
                backendServiceArm: '$(SVC_CONNECTION)'
                backendAzureRmResourceGroupName: '$(TFSTATE_RG)'
                backendAzureRmStorageAccountName: '$(TFSTATE_SA)'
                backendAzureRmContainerName: '$(TFSTATE_CONTAINER)'
                backendAzureRmKey: '$(TFSTATE_KEY)'
                commandOptions: '-upgrade'

            - task: TerraformCLI@2
              displayName: 'Deploy'
              inputs:
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
                environmentServiceName: $(SVC_CONNECTION)
                commandOptions: '-input=false -auto-approve output.tfplan'
                allowTelemetryCollection: true
